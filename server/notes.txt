// important github:
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

!! To navigate through the server directory, 
write the command in the terminal --> npm init -y
this is going to initialisse an empty package json.
Now we will be able to install all the necessary dependencies.

!! npm install body-parser cors express mongoose nodemon
 *body-parser --> this is going to enable us to send post requests.
 *express --> framework for creating the routing of our application.
 *mongoose --> to create models for our posts.
 *nodemon --> so that we dont have to manually reset the server everytime we make a change.

!! Now after this import the dependencies in index.js
After successfully writing the import code in the index.js file,
we need to do one small thing in the package.json file
add one line below the main index.js --> "type": "module",

!! After this, delete the test script and add start script.
"start": "nodemon index.js"

!! For every express application, we need to initialise the app.
const app = express();

!! After the general setting of bodyParser, we need to connect our server application with a real database.
For that we are going to use mongodb.(cloud/atlas version){that means they are going to host our databse on their cloud}
After creating the cluster, we need to connect it with the application.
For that copy the command from the mongodb atlas and copy paste in vs code.
const CONNECTION_URL = "...";

!! After connecting to the databse, we need to port now,
const PORT = process.env.PORT || 5000;

!! Finally, we will use our mongoose to connect to the database.
mongoose.connect(CONNECTION_URL, {useNewUrlParser: true, useUnifiedTopology: true})
.then(() => app.listen(PORT, () => console.log('Server is running on port: ${PORT}')))  //what we want to do if our app is successful.
.catch((error) => console.log(error.message)); // if the connection is not successful.

!! Final piece of setup is 
mongoose.set('useFindAndModify', false);
Hence we are connected to the databse.

!! Now we can start creating routes for our backend application.
For that we are going to make a new folder in server - routes.
Inside routes, we are going to create a file called posts.js
Inside this post we are going to add all the routes that have to do something with post.

!! For setting up,
import express then 
const router = express.Router();
Now we can start adding routes.
First by get method - router.get('/',(req, res) => {
   // first the path then the callback function when someone visits localhost 5000 
   res.Send("This just works");
});
export default router;

!! Now we will import router in index.js file.
import postRoutes from './routes/posts.js';
Now we can use express middleware to connect this to our application.
app.use('/posts', postRoutes); //it is said that every route inside of the post routes is going to start with post.

!! Backend Folder Structure..
We will make a folder called controllers, inside that folder create a file called posts.js
Inside this posts.js file, we are going to create all the handlers for our routes.
Now we will call the function in the routes.
import {getPosts} from '../controller/posts.js'

!! Creation of a new folder -- models
Now create a file as postMessage.js --> we will utilise the possibilities of mongoose.
Now, first we have to create a mongoose schema -
const postSchema = mongoose.Schema({
});
Schema--with mongodb, we can create documents that look absolutely different. 
Mongoose allows us to give uniformity to our documents.

!! After the creation of schema, we now want to convert into model.
const postMessage = mongoose.model('PostMessage',postSchema);
After this we are exporting a mongoose model from the postMessage file and later on we will able to run commands such
as find, create, delete and update.
Now our model is done, so we can start adding to our route.

!! We will first create a createPost in the controller and then import in the route.
After this we will start implementing the real logic for getting and creating posts.
For this-- import PostMessage from '../models/postMessage.js';
After giving the logic for getPosts, now its time for giving logic for creating the posts.
With post request, we have access to req.body --
const post = req.body;
Immediately after we have created this post, we have to create a form for making different posts.
Now, we want to create a new post,
const newPost = new PostMessage(post);



